package com.ali.coffeehub.article.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArticlesEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticlesEntityAllPropertiesEquals(ArticlesEntity expected, ArticlesEntity actual) {
        assertArticlesEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertArticlesEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticlesEntityAllUpdatablePropertiesEquals(ArticlesEntity expected, ArticlesEntity actual) {
        assertArticlesEntityUpdatableFieldsEquals(expected, actual);
        assertArticlesEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticlesEntityAutoGeneratedPropertiesEquals(ArticlesEntity expected, ArticlesEntity actual) {
        assertThat(expected)
            .as("Verify ArticlesEntity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticlesEntityUpdatableFieldsEquals(ArticlesEntity expected, ArticlesEntity actual) {
        assertThat(expected)
            .as("Verify ArticlesEntity relevant properties")
            .satisfies(e -> assertThat(e.getCategoryID()).as("check categoryID").isEqualTo(actual.getCategoryID()))
            .satisfies(e -> assertThat(e.getBodyId()).as("check bodyId").isEqualTo(actual.getBodyId()))
            .satisfies(e -> assertThat(e.getAuthorId()).as("check authorId").isEqualTo(actual.getAuthorId()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getSlug()).as("check slug").isEqualTo(actual.getSlug()))
            .satisfies(e -> assertThat(e.getSubTitle()).as("check subTitle").isEqualTo(actual.getSubTitle()))
            .satisfies(e -> assertThat(e.getThumbnailUrl()).as("check thumbnailUrl").isEqualTo(actual.getThumbnailUrl()))
            .satisfies(e -> assertThat(e.getReadingTime()).as("check readingTime").isEqualTo(actual.getReadingTime()))
            .satisfies(e -> assertThat(e.getIsPinned()).as("check isPinned").isEqualTo(actual.getIsPinned()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticlesEntityUpdatableRelationshipsEquals(ArticlesEntity expected, ArticlesEntity actual) {
        // empty method
    }
}
