package com.ali.coffeehub.article.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArticleCommentEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleCommentEntityAllPropertiesEquals(ArticleCommentEntity expected, ArticleCommentEntity actual) {
        assertArticleCommentEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertArticleCommentEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleCommentEntityAllUpdatablePropertiesEquals(ArticleCommentEntity expected, ArticleCommentEntity actual) {
        assertArticleCommentEntityUpdatableFieldsEquals(expected, actual);
        assertArticleCommentEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleCommentEntityAutoGeneratedPropertiesEquals(ArticleCommentEntity expected, ArticleCommentEntity actual) {
        assertThat(expected)
            .as("Verify ArticleCommentEntity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleCommentEntityUpdatableFieldsEquals(ArticleCommentEntity expected, ArticleCommentEntity actual) {
        assertThat(expected)
            .as("Verify ArticleCommentEntity relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getArticleId()).as("check articleId").isEqualTo(actual.getArticleId()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getParentId()).as("check parentId").isEqualTo(actual.getParentId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleCommentEntityUpdatableRelationshipsEquals(ArticleCommentEntity expected, ArticleCommentEntity actual) {
        // empty method
    }
}
